Meny för sodacrate program.

class Program
{
public static void Main(string[] args)
{
soda läsk1 = new soda("Fanta", 1, "Coca Cola");
soda läsk2 = new soda("Water", 2, "Bon Aqua");
}
}
public class Sodacrate
{
private string number;
private string läsk1;
private string läsk2;
private string läsk3;
private string läsk4;
private string läsk5;
private string läsk6;
{
public sodacrate(int _number)
}
number = _number;
}
public void add_soda(string _name, int _cost, string _type)
{
läsk1 = new soda(_name,_cost,_type);
}
public void show_sodas
{
Console.WriteLine("läsk1");
}

public class soda
{
private string name;
private int cost;
private string type;

public soda(string _name, int _cost, string _type)
{
name = _name
if (_cost < 0)
cost = 0;
else 
age = _cost
type = _type
}

while (true)
{
Console.WriteLine("Choose options: ");
Console.WriteLine("[A]dd or remove soda");
Console.WriteLine("[C]ontent");
Console.WriteLine("[P]rice");
Console.WriteLine("[S]oda");
Console.WriteLine("[Q]uit");

string MenySelection = Console.ReadLine();
 if (MenySelection == "A" || MenySelection =="a")
{ 
Console.WriteLine("If you want to add soda, type A. If you want to remove soda, type R");
//Random code to add and remove soda
}
else if (meny selection for C)
{Console.writeLine("To view the content, write C.");
//Code to view the content of sodacrate.
{
else if (meny selection for P)
{ 
Console.WriteLine("Here are the prices for the soda bottles")
//Code to display what sodabottles are Worth. For example name = Fanta cost = 10kr type = CocaCola
}
else if (Menyselection for S)
{
Console.WriteLine("What soda do you want to search for? We have A, B, C")
//Code for if user input is A, write the price and type and name I guess.
]
else if (Meny selection for Q)
{
Break;
}
else 
{ Console.WriteLine("Not an avalible input");
}
}
--------------------------------------------------------------------------------------------------
 static public List<soda> sodas { get; set; }
        public class soda
        {
            public string name { get; private set; }
            public int cost { get; private set; }
            public string type { get; private set; }

            public soda(string _name, int _cost, string _type)
            {
                name = _name;
                if (_cost < 0)
                    cost = 0;
                else
                    cost = _cost;
                type = _type;
            }
        }
        static void Main(string[] args)
        {
            ShowMenu();
        }
        private static void ShowMenu()
        {
            Console.Clear();
            Console.WriteLine("Select an option:");
            Console.WriteLine("1- Enter a new soda");
            Console.WriteLine("2- View items");

            ConsoleKeyInfo info = Console.ReadKey();
            int selection;
            int.TryParse(info.KeyChar.ToString(), out selection);

            switch (selection)
            {
                case 1:
                    AddRecord();
                    ShowMenu();
                    break;
                case 2:
                    ShowRecords();
                    ShowMenu();
                    break;
                default:
                    ShowMenu();
                    break;
            }
        }
        private static void ShowRecords()
        {
            Console.Clear();
            if (sodas == null)
                Console.WriteLine("There is no records to show.");
            else
            {
                foreach (soda item in sodas)
                {
                    Console.WriteLine("Records#");
                    Console.WriteLine("Soda Name: {0}, Price: {1}, Type: {2}", item.name, item.cost, item.type );
                }
            }
            Console.WriteLine("Touch a key to return to main menu..");
            Console.ReadKey();
        }
        private static void AddRecord()
        {
            string name = "";
            int cost = 0;
            string type = "";
            if (sodas == null) sodas = new List<soda>();
            Console.WriteLine("Please enter name: ");
            name = Console.ReadLine();

            while(cost ==0)
            {
                Console.WriteLine("Please enter price: ");
                string price = Console.ReadLine();
                int.TryParse(price, out cost);
            }
            
            Console.WriteLine("Please enter type: ");
            type = Console.ReadLine();
            sodas.Add(new soda(name, cost, type));
        }
        private static void RemoveRecord()
        {
            if(sodas == null)
            {
                Console.WriteLine("There is no record");
                Console.ReadKey();
                return;
            }
            Console.WriteLine("Please write the name of Soda to remove: ");
            string name = Console.ReadLine();
            if (sodas.Select(x => x.name).Contains(name))
            {
                var itemToRemove = sodas.Where(x => x.name.Equals(name)).First();
                if (itemToRemove != null)
                    sodas.Remove(itemToRemove);
            }
            else
            {
                Console.WriteLine("record not found");
                Console.ReadKey();
            }
        }
------------FINALE-----CODE-----------------------

 static public List<soda> sodas { get; set; }
        public class soda
        {
            public string name { get; private set; }
            public int cost { get; private set; }
            public string type { get; private set; }

            public soda(string _name, int _cost, string _type)
            {
                name = _name;
                if (_cost < 0)
                    cost = 0;
                else
                    cost = _cost;
                type = _type;
            }
        }
        static void Main(string[] args)
        {
            ShowMenu();
        }
while (true)
            {
                Console.WriteLine("Select an option");
                Console.WriteLine("[L]ibrary on sodas, add and remove.");
                Console.WriteLine("[I]nformation on sodacrate");    //Ska ha pris på läskbacken och kunna kolla vad som finns
                Console.WriteLine("[Q]uit");

                string MenySelection = Console.ReadLine();

                switch (MenySelection.ToUpper())
                {
                    case "L":
                        Console.WriteLine("This is your soda library, you can add/remove sodas or view them.");
        private static void ShowMenu()
        {
            Console.Clear();
            Console.WriteLine("Select an option");
            Console.WriteLine("[V]iew items");
            Console.WriteLine("[E]nter new soda");
            Console.WriteLine("[R]emove soda");
            
            ConsoleKeyInfo info = Console.ReadKey();
            int selection;
            int.TryParse(info.KeyChar.ToString(), out selection);

            switch (selection)
            {
                case "V":
                    ShowRecords();
                    ShowMenu();
                    break;
                case "E":
                    AddRecord();
                    ShowMenu();
                    break;
                case "R":
                     RemoveRecord();
                     ShowMenu();
                     break;
                default:
                    ShowMenu();
                    break;
            }
        }

        private static void ShowRecords()
        {
            Console.Clear();
            if (sodas == null)
                Console.WriteLine("There is no records to show.");
            else
            {
                foreach (soda item in sodas)
                {
                    Console.WriteLine("Records#");
                    Console.WriteLine("Soda Name: {0}, Price: {1}, Type: {2}", item.name, item.cost, item.type );
                }
            }
            Console.WriteLine("Touch a key to return to main menu..");
            Console.ReadKey();
        }
                private static void AddRecord()
        {
            string name = "";
            int cost = 0;
            string type = "";
            if (sodas == null) sodas = new List<soda>();
            Console.WriteLine("Please enter name: ");
            name = Console.ReadLine();

            while(cost ==0)
            {
                Console.WriteLine("Please enter price: ");
                string price = Console.ReadLine();
                int.TryParse(price, out cost);
            }
            
            Console.WriteLine("Please enter type: ");
            type = Console.ReadLine();
            sodas.Add(new soda(name, cost, type));
        }
        private static void RemoveRecord()
        {
            if(sodas == null)
            {
                Console.WriteLine("There is no record");
                Console.ReadKey();
                return;
            }
            Console.WriteLine("Please write the name of Soda to remove: ");
            string name = Console.ReadLine();
            if (sodas.Select(x => x.name).Contains(name))
            {
                var itemToRemove = sodas.Where(x => x.name.Equals(name)).First();
                if (itemToRemove != null)
                    sodas.Remove(itemToRemove);
            }
            else
            {
                Console.WriteLine("record not found");
                Console.ReadKey();
            }
        }

                        break;

                    case "C":
                        Console.writeLine("To view the content, write C.");
                        //Code to view the content of sodacrate.
                        break;
                    case "P":
                        Console.WriteLine("Here are the prices for the soda bottles")
                        //Code to display what sodabottles are Worth. For example name = Fanta cost = 10kr type = CocaCola
                        break;
                    case "S":
                        Console.WriteLine("What soda do you want to search for? We have A, B, C")
                        //Code for if user input is A, write the price and type and name I guess.
                        break;
                    case "Q":
                        Environment.Exit(1);
                        break;

                    default:
                        Console.WriteLine("Not an avalible input");
                        break;
                }

            }

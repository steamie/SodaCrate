Meny för sodacrate program.

class Program
{
public static void Main(string[] args)
{
soda läsk1 = new soda("Fanta", 1, "Coca Cola");
soda läsk2 = new soda("Water", 2, "Bon Aqua");
}
}
public class Sodacrate
{
private string number;
private string läsk1;
private string läsk2;
private string läsk3;
private string läsk4;
private string läsk5;
private string läsk6;
{
public sodacrate(int _number)
}
number = _number;
}
public void add_soda(string _name, int _cost, string _type)
{
läsk1 = new soda(_name,_cost,_type);
}
public void show_sodas
{
Console.WriteLine("läsk1");
}

public class soda
{
private string name;
private int cost;
private string type;

public soda(string _name, int _cost, string _type)
{
name = _name
if (_cost < 0)
cost = 0;
else 
age = _cost
type = _type
}

while (true)
{
Console.WriteLine("Choose options: ");
Console.WriteLine("[A]dd or remove soda");
Console.WriteLine("[C]ontent");
Console.WriteLine("[P]rice");
Console.WriteLine("[S]oda");
Console.WriteLine("[Q]uit");

string MenySelection = Console.ReadLine();
 if (MenySelection == "A" || MenySelection =="a")
{ 
Console.WriteLine("If you want to add soda, type A. If you want to remove soda, type R");
//Random code to add and remove soda
}
else if (meny selection for C)
{Console.writeLine("To view the content, write C.");
//Code to view the content of sodacrate.
{
else if (meny selection for P)
{ 
Console.WriteLine("Here are the prices for the soda bottles")
//Code to display what sodabottles are Worth. For example name = Fanta cost = 10kr type = CocaCola
}
else if (Menyselection for S)
{
Console.WriteLine("What soda do you want to search for? We have A, B, C")
//Code for if user input is A, write the price and type and name I guess.
]
else if (Meny selection for Q)
{
Break;
}
else 
{ Console.WriteLine("Not an avalible input");
}
}
--------------------------------------------------------------------------------------------------
 static public List<soda> sodas { get; set; }
        public class soda
        {
            public string name { get; private set; }
            public int cost { get; private set; }
            public string type { get; private set; }

            public soda(string _name, int _cost, string _type)
            {
                name = _name;
                if (_cost < 0)
                    cost = 0;
                else
                    cost = _cost;
                type = _type;
            }
        }
        static void Main(string[] args)
        {
            ShowMenu();
        }
        private static void ShowMenu()
        {
            Console.Clear();
            Console.WriteLine("Select an option:");
            Console.WriteLine("1- Enter a new soda");
            Console.WriteLine("2- View items");

            ConsoleKeyInfo info = Console.ReadKey();
            int selection;
            int.TryParse(info.KeyChar.ToString(), out selection);

            switch (selection)
            {
                case 1:
                    AddRecord();
                    ShowMenu();
                    break;
                case 2:
                    ShowRecords();
                    ShowMenu();
                    break;
                default:
                    ShowMenu();
                    break;
            }
        }
        private static void ShowRecords()
        {
            Console.Clear();
            if (sodas == null)
                Console.WriteLine("There is no records to show.");
            else
            {
                foreach (soda item in sodas)
                {
                    Console.WriteLine("Records#");
                    Console.WriteLine("Soda Name: {0}, Price: {1}, Type: {2}", item.name, item.cost, item.type );
                }
            }
            Console.WriteLine("Touch a key to return to main menu..");
            Console.ReadKey();
        }
        private static void AddRecord()
        {
            string name = "";
            int cost = 0;
            string type = "";
            if (sodas == null) sodas = new List<soda>();
            Console.WriteLine("Please enter name: ");
            name = Console.ReadLine();

            while(cost ==0)
            {
                Console.WriteLine("Please enter price: ");
                string price = Console.ReadLine();
                int.TryParse(price, out cost);
            }
            
            Console.WriteLine("Please enter type: ");
            type = Console.ReadLine();
            sodas.Add(new soda(name, cost, type));
        }
        private static void RemoveRecord()
        {
            if(sodas == null)
            {
                Console.WriteLine("There is no record");
                Console.ReadKey();
                return;
            }
            Console.WriteLine("Please write the name of Soda to remove: ");
            string name = Console.ReadLine();
            if (sodas.Select(x => x.name).Contains(name))
            {
                var itemToRemove = sodas.Where(x => x.name.Equals(name)).First();
                if (itemToRemove != null)
                    sodas.Remove(itemToRemove);
            }
            else
            {
                Console.WriteLine("record not found");
                Console.ReadKey();
            }
        }
------------FINALE-----CODE-----------------------

 static public List<soda> sodas { get; set; }
        public class soda
        {
            public string name { get; private set; }
            public int cost { get; private set; }
            public string type { get; private set; }

            public soda(string _name, int _cost, string _type)
            {
                name = _name;
                if (_cost < 0)
                    cost = 0;
                else
                    cost = _cost;
                type = _type;
            }
        }
        static void Main(string[] args)
        {
            ShowMenu();
        }
while (true)
            {
                Console.WriteLine("Select an option");
                Console.WriteLine("[L]ibrary on sodas, add and remove.");
                Console.WriteLine("[I]nformation on sodacrate");    //Ska ha pris på läskbacken och kunna kolla vad som finns
                Console.WriteLine("[Q]uit");

                string MenySelection = Console.ReadLine();

                switch (MenySelection.ToUpper())
                {
                    case "L":
                        Console.WriteLine("This is your soda library, you can add/remove sodas or view them.");
        private static void ShowMenu()
        {
            Console.Clear();
            Console.WriteLine("Select an option");
            Console.WriteLine("[V]iew items");
            Console.WriteLine("[E]nter new soda");
            Console.WriteLine("[R]emove soda");
            
            ConsoleKeyInfo info = Console.ReadKey();
            int selection;                                            //Om jag itne vet hur man gör med bokstäver I guess
            int.TryParse(info.KeyChar.ToString(), out selection);   //Ta bort maybe

            switch (selection)
            {
                case "V":
                    ShowRecords();
                    ShowMenu();
                    break;
                case "E":
                    AddRecord();
                    ShowMenu();
                    break;
                case "R":
                     RemoveRecord();
                     ShowMenu();
                     break;
                default:
                    ShowMenu();
                    break;
            }
        }

        private static void ShowRecords()
        {
            Console.Clear();
            if (sodas == null)
                Console.WriteLine("There is no records to show.");
            else
            {
                foreach (soda item in sodas)
                {
                    Console.WriteLine("Records#");
                    Console.WriteLine("Soda Name: {0}, Price: {1}, Type: {2}", item.name, item.cost, item.type );
                }
            }
            Console.WriteLine("Touch a key to return to main menu..");
            Console.ReadKey();
        }
                private static void AddRecord()
        {
            string name = "";
            int cost = 0;
            string type = "";
            if (sodas == null) sodas = new List<soda>();
            Console.WriteLine("Please enter name: ");
            name = Console.ReadLine();

            while(cost ==0)
            {
                Console.WriteLine("Please enter price: ");
                string price = Console.ReadLine();
                int.TryParse(price, out cost);
            }
            
            Console.WriteLine("Please enter type: ");
            type = Console.ReadLine();
            sodas.Add(new soda(name, cost, type));
        }
        private static void RemoveRecord()
        {
            if(sodas == null)
            {
                Console.WriteLine("There is no record");
                Console.ReadKey();
                return;
            }
            Console.WriteLine("Please write the name of Soda to remove: ");
            string name = Console.ReadLine();
            if (sodas.Select(x => x.name).Contains(name))
            {
                var itemToRemove = sodas.Where(x => x.name.Equals(name)).First();
                if (itemToRemove != null)
                    sodas.Remove(itemToRemove);
            }
            else
            {
                Console.WriteLine("record not found");
                Console.ReadKey();
            }
        }
               break;

               case "I":
            Console.WriteLine("Select an option");
            Console.WriteLine("[I]tems in sodacrate");
            Console.WriteLine("[P]rice on sodacrate");

                    break;
               case "Q":
                    Environment.Exit(1);
                    break;

               default:
                    Console.WriteLine("Not an avalible input");
                    break;
                }

 ------------------------------------------------------------------------------------------ Object orienterat bajs
 Class läs
 Class sodacrate
 Class program
------------------------------- Class Läsk -----------------------
public class soda
{
 private string name;
 private int cost;
 private string type;
 
 public soda(string _name, int _cost, string _type)
 {
 name = _name;
 if (_cost < 0)
  cost = 0;
 else
  cost = _cost;
 type = _type;
 }
public void sort()
{
 for (int i = 0; i < max; i++)
 {
  int nrLeft = max - i;
  
  for (int j = 0; j < nrLeft; j++)
  {
   if (pos[j] > pos[j+1]) //pos for position, dunno what to name yet.
   {
    int temp = pos[j];
    pos[j] = pos[j+1];
    pos[j+1] = temp;
   }
  }
 }
}
public override string ToString
{
 return string.Format("{0} kostar {1}kr och är en {2}", name, cost, type);
}
--------------------------------- Class sodacrate -----------------------
public class sodacrate
{
 private int number;
 private soda[] sodas;
 
 public sodacrate(int _number)
 {
  number = _number;
  sodas = new soda[25];
 }
 public void add_soda(int pos, string _name, int _cost, string _type)
 {
  sodas[pos] = new soda(_name, _cost, _type);
 }
 public void show_sodas()
 {
  foreach (var tmp_soda in sodas)
   if (tmp_soda != null)
    Console.WriteLine(tmp_soda);
   else
    Console.WriteLine("Empty spot");
----------------------- Class program ------------------------
Class program
{
 static void Main(string[] args)
 {
  sodacrate One = new sodacrate(1);
  One.add_soda(0, "Fanta", 10, "Soda");
  One.add_soda(1, "Spendrups", 15, "Light beer");
  One.add_soda(2, "Carlsberg", 20, "Beer");
  One.add_soda(3, "Bonaqua Pear", 5, "Water");
  One.show_sodas();
  Console.ReadKey();
 }
}
----------------------- dog owner many to many??? ------------
public class Boss
{
   private string name;
   private List<Hashtable> dogs;
   private int limit;

   public Boss(string name, int dogLimit)
   {
      this.name = name;
      this.dogs = new List<Hashtable>();
      this.limit = dogLimit; 
   }

   public string Name { get { return this.name; } }

   public void AddDog(string nickname, Dog dog)
   {
      if (!this.dogs.Contains(nickname) && !this.dogs.Count == limit)
      {
         this.dogs.Add(nickname, dog);
         dog.AddBoss(this);
      } 
   }

   public void RemoveDog(string nickname)
   {
       this.dogs.Remove(nickname);
       dog.RemoveBoss(this);
   }

   public void Hashtable Dogs { get { return this.dogs; } }
}

public class Dog
{
   private string name;
   private List<Boss> bosses;

   public Dog(string name)
   {
      this.name = name;
      this.bosses = new List<Boss>();
   }

   public string Name { get { return this.name; } }

   public void AddBoss(Boss boss)
   {
      if (!this.bosses.Contains(boss))
      {
          this.bosses.Add(boss);
      }
   }

   public void RemoveBoss(Boss boss)
   {
      this.bosses.Remove(boss);
   }  

   public ReadOnlyCollection<Boss> Bosses { get { return new ReadOnlyCollection<Boss>(this.bosses); } }
}
var james = new Boss("James", ConfigurationManager.AppSettings["DogsPerBoss"]);
var joe = new Boss("Joe", ConfigurationManager.AppSettings["DogsPerBoss"]);

var benji = new Dog("Benji");
var pooch = new Dog("Pooch");

james.AddDog("Good boy", benji);
joe.AddDog("Doggy", benji);

james.AddDog("Rover", pooch);
joe.AddDog("Buddy", pooch);  // won't add as the preset limit has been reached.
--------------------------------------------------------------------------
public class Sodacrate
{
   private string name;
   private List<Hashtable> sodas;
   private int limit;

   public Boss(string name, int sodaLimit)
   {
      this.name = name;
      this.sodas = new List<Hashtable>();
      this.limit = sodaLimit; 
   }

   public string Name { get { return this.name; } }

   public void AddSoda(string nickname, Soda soda)
   {
      if (!this.sodas.Contains(nickname) && !this.sodas.Count == limit)
      {
         this.sodas.Add(nickname, soda);
         soda.AddSodacrate(this);
      } 
   }

   public void RemoveSoda(string nickname)
   {
       this.sodas.Remove(nickname);
       Soda.RemoveSodacrate(this);
   }

   public void Hashtable Sodas { get { return this.sodas; } }
}

public class Soda
{
   private string name;
   private List<Sodacrate> sodacrates;

   public Soda(string name, int cost, string type)
   {
      this.name = name;
      this.cost = cost;
      this.sodacrates = new List<Sodacrate>();
   }

   public string Name { get { return this.name; } }
   public int Cost { get { return this.cost; } }
   public void AddSodacrate(Sodacrate sodacrate)
   {
      if (!this.sodacrates.Contains(sodacrate))
      {
          this.sodacrates.Add(sodacrate);
      }
   }

   public void RemoveSodacrate(Sodacrate sodacrate)
   {
      this.sodacrates.Remove(sodacrate);
   }  

   public ReadOnlyCollection<Sodacrate> Sodacrates { get { return new ReadOnlyCollection<Sodacrate>(this.sodacrates); } }
}
var one = new Sodacrate("One", ConfigurationManager.AppSettings["SodasPerSodacrate"]);
var two = new Sodacrate("Two", ConfigurationManager.AppSettings["SodasPerSodacrate"]);

var fanta = new Soda("Fanta", 10);
var bonaquap = new Soda("Bonaqua Pear", 10);

one.AddSoda("Soda:", fanta);
two.AddSoda("Soda:", fanta);

one.AddSoda("Water:", bonaquap);
two.AddSoda("Water:", bonaquap);
------------------------- el finale ---------------------
public class soda
static public list<soda> sodas { get; set; }
{ 
 public string name { get; private set; } 
 public int cost { get; private set; } 
 public string type { get; private set; }
 
 public soda(string _name, int _cost, string _type) 
 {
  name = _name; 
  if (_cost < 0) 
   cost = 0; 
  else 
   cost = _cost; 
  type = _type; 
 } 

private static void AddRecord() 
 { 
  string name = ""; 
  int cost = 0; 
  string type = ""; 
  if (sodas == null) sodas = new List<soda>(); 
   Console.WriteLine("Please enter name: "); 
  name = Console.ReadLine(); 
 
 while(cost ==0) 
 { 
  Console.WriteLine("Please enter price: "); 
  string price = Console.ReadLine(); 
  int.TryParse(price, out cost); 
 } 
 Console.WriteLine("Please enter type: "); 
 type = Console.ReadLine(); 
 sodas.Add(new soda(name, cost, type)); 
 }

private static void RemoveRecord() 
{ 
if(sodas == null) 
 { 
 Console.WriteLine("There is no record"); 
 Console.ReadKey(); 
 return; 
 } 
Console.WriteLine("Please write the name of Soda to remove: "); 
string name = Console.ReadLine(); 
 if (sodas.Select(x => x.name).Contains(name)) 
 { 
  var itemToRemove = sodas.Where(x => x.name.Equals(name)).First(); 
   if (itemToRemove != null) 
   sodas.Remove(itemToRemove); 
 } 
  else 
  { 
   Console.WriteLine("record not found"); 
   Console.ReadKey(); 
  } 
 }
 ----------------------------------- soda crate nu då --------------------------
public class sodacrate
{
 private string name;
 private list<soda> läsk;
 
 public husse(string _name)
 {
  name = _name;
  läsk = new list<soda>();
 }
 public void add_SodaToCrate(string _name, int _cost, string _type)
 {
  läsk.Add(new soda(_name, _cost, _type));
 }
 public void show_SodaInCrate
 {
 Bajs kod, I think Im gucci
 }
}






class program
{

    static public List<soda> sodas { get; set; }
    public class soda
    {
        public int pos { get; private set; }
        public string name { get; private set; }
        public int cost { get; private set; }
        public string type { get; private set; }

        public soda(int _pos, string _name, int _cost, string _type)
        {
            pos = _pos;
            name = _name;
            if (_cost < 0)
                cost = 0;
            else
                cost = _cost;
            type = _type;
        }
    }
    static void Main(string[] args)
    {
        ShowMenu();
    }
    private static void ShowMenu()
    {
        Console.Clear();
        Console.WriteLine("Välj ett alternativ:");
        Console.WriteLine("[1] Lägg till ny läsk");
        Console.WriteLine("[2] Ta bort läsk");
        Console.WriteLine("Sortera läskbacken");
        Console.WriteLine("Byt plats på läsk...?");
        Console.WriteLine("[4] Titta i läskbacken");

        ConsoleKeyInfo info = Console.ReadKey();
        int selection;
        int.TryParse(info.KeyChar.ToString(), out selection);

        switch (selection)
        {
            case 1:
                AddRecord();
                ShowMenu();
                break;
            case 2:
                RemoveRecord();
                ShowMenu();
                break;
            case 3:
                SortRecord();
                ShowMenu();
                break;
            case 4:
                ShowRecords();
                ShowMenu();
                break;
            default:
                ShowMenu();
                break;
        }
    }
    private static void ShowRecords()
    {
        Console.Clear();
        if (sodas == null)
            Console.WriteLine("Finns ingen läsk att visa");
        else
        {
            foreach (soda item in sodas)
            {
                Console.WriteLine("Position: {0}, Dryck: {1}, Pris: {2}, Typ: {3}", item.pos, item.name, item.cost, item.type);
            }
        }
        Console.WriteLine("Tryck för att komma till huvudmenyn");
        Console.ReadKey();
    }
    private static void AddRecord()
    {
        Console.Clear();
        int pos = 0;
        string name = "";
        int cost = 0;
        string type = "";
        if (sodas == null) sodas = new List<soda>();
        while (pos == 0)
        {
            Console.WriteLine("Position: ");
            string position = Console.ReadLine();
            int.TryParse(position, out pos);
        }
        Console.WriteLine("Namn: ");
        name = Console.ReadLine();

        while (cost == 0)
        {
            Console.WriteLine("Pris: ");
            string price = Console.ReadLine();
            int.TryParse(price, out cost);
        }


        Console.WriteLine("Typ: ");
        type = Console.ReadLine();

        sodas.Add(new soda(pos, name, cost, type));

    }
    private static void RemoveRecord()
    {
        Console.Clear();
        if (sodas == null)
        {
            Console.WriteLine("Läskbacken är tom!");
            Console.ReadKey();
            return;
        }
        Console.WriteLine("Namn på läsk");
        string name = Console.ReadLine();
        if (sodas.Select(x => x.name).Contains(name))
        {
            var itemToRemove = sodas.Where(x => x.name.Equals(name)).First();
            if (itemToRemove != null)
                sodas.Remove(itemToRemove);
        }
        else
        {
            Console.WriteLine("INte funnen");
            Console.ReadKey();
        }
    }
    private static void SortRecord()
    {
        Console.Clear();
        {
            for (int i = 0; i < 25; i++)
            {
                int nrLeft = 25 - i;
                for (int j = 0; j < nrLeft; j++)
                {
                    if (position[j] > pos[j + 1])
                    {
                        int temp = pos[j];
                        pos[j] = pos[j + 1];
                        pos[j + 1] = temp;
                    }
                }
            }
        }
    }
}

            sodas = new List<soda>();
            }
            public void add_soda(int pos, string _name, int _cost, string _type)
            {
                string name = "";
                int cost = 0;
                string type = "";
                sodas.Add(new soda(name, cost, type));
---------------------------------------------------------------------------------------------------------------------------
    class Program
    {
        static void Main(string[] args)
        {
            ShowMenu();
        }
        private static void ShowMenu()
        {
            Console.Clear();
            Console.WriteLine("Välj ett alternativ:");
            Console.WriteLine("[1] Lägg till ny läsk");
            Console.WriteLine("[2] Ta bort läsk");
            Console.WriteLine("[3] Visa läskback");
            Console.WriteLine("[4] Byt läsk i läskbacke");
            Console.WriteLine("[5] Sortera läskbacken");
            Console.WriteLine("[6] Byt plats på läsk i läskbacken");

            ConsoleKeyInfo info = Console.ReadKey();
            int selection;
            int.TryParse(info.KeyChar.ToString(), out selection);

            switch (selection)
            {
                case 1:
                    add_soda();
                    ShowMenu();
                    break;
                case 2:
                    remove_soda();
                    ShowMenu();
                    break;
                case 3:
                    show_sodas();
                    ShowMenu();
                    break;
                case 4:
                    change_sodas();
                    ShowMenu();
                    break;
                case 5:
                    sort_sodas();
                    ShowMenu();
                    break;
                case 6:
                    swap_sodas();
                    ShowMenu();
                    break;
                default:
                    ShowMenu();
                    break;
            }
        } 
    }

        public class sodacrate
        {
            private int number;
            private List<soda> sodas;

        public void add_soda(string _name, int _cost, string _type)
        {
            string name = "";
            int cost = 0;
            string type = "";
            sodas.Add(new soda(name, cost, type));


                Console.WriteLine("Namn:");
                name = Console.ReadLine();

                while (cost == 0)
                {
                    Console.WriteLine("Pris: ");
                    string price = Console.ReadLine();
                    int.TryParse(price, out cost);
                }

                Console.WriteLine("Typ: ");
                type = Console.ReadLine();

            }
            public void remove_soda()
            {
                if (sodas == null)
                {
                    Console.WriteLine("Läskbacken är tom!");
                    Console.ReadKey();
                    return;
                }
                Console.WriteLine("Namn på läsk:");
                string name = Console.ReadLine();
                if (sodas.Select(x => x.name).Contains(name))
                {
                var itemToRemove = sodas.Where(x => x.name.Equals(name)).First();
                if (itemToRemove != null)
                    sodas.Remove(itemToRemove);
                }
                else
                {
                Console.WriteLine("Inte funnen");
                Console.ReadKey();
                }
        }
        public void change_sodas()
        {
            Console.WriteLine("Position: ");
            string pos2 = Console.ReadLine();
            int.TryParse(pos2, out pos);
            Console.WriteLine("Namn på läsk du vill lägga in:");
            string name = Console.ReadLine();
            string[] sodas2 = sodas.Select(x => x.Replace(pos, name)).ToArray();
        }
            public void show_sodas()
            {
                foreach (var tmp_soda in sodas)
                    if (tmp_soda != null)
                        Console.WriteLine(tmp_soda);
                    else
                        Console.WriteLine("Tom plats");
            }
        public void sort_sodas()
        {
            var sortedCostList = sodas.OrderBy(si => si.cost).ToArray();
            sodas.Sort(new Comparison<sodacrate>((x, y) => int.Compare(x.cost, y.cost)));
        }
        public void swap_sodas()
        {
           // Dont know how to it yet... :(
        }

        }
        public class soda
        {
            public string name { get; private set; }
            public int cost { get; private set; }
            public string type { get; private set; }

            public soda(string _name, int _cost, string _type)
            {
                name = _name;
                if (_cost < 0)
                    cost = 0;
                else
                    cost = _cost;
                type = _type;
            }
        }
    }
